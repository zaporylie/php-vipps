<?php

namespace zaporylie\Vipps\Tests\Unit\Resource\Payment;

use GuzzleHttp\Psr7\Response;
use zaporylie\Vipps\Model\Payment\RequestRefundPayment;
use zaporylie\Vipps\Model\Payment\ResponseRefundPayment;
use zaporylie\Vipps\Resource\Payment\RefundPayment;
use zaporylie\Vipps\Resource\HttpMethod;

class RefundPaymentTest extends PaymentResourceBaseTestBase
{

    /**
     * @var \zaporylie\Vipps\Resource\Payment\RefundPayment
     */
    protected $resource;

    /**
     * {@inheritdoc}
     */
    protected function setUp() : void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->resource = $this->getMockBuilder(RefundPayment::class)
            ->setConstructorArgs([$this->vipps, 'test_subscription_key', 'test_order_id', new RequestRefundPayment()])
            ->disallowMockingUnknownTypes()
            ->setMethods(['makeCall'])
            ->getMock();

        $this->resource
            ->expects($this->any())
            ->method('makeCall')
            ->will($this->returnValue(new Response(200, [], \GuzzleHttp\Psr7\Utils::streamFor(json_encode([])))));
    }

    /**
     * @covers \zaporylie\Vipps\Resource\Payment\RefundPayment::getBody()
     * @covers \zaporylie\Vipps\Resource\Payment\RefundPayment::__construct()
     */
    public function testBody()
    {
        $this->assertNotEmpty($this->resource->getBody());
        // Valid JSON.
        $this->assertNotNull(json_decode($this->resource->getBody()));
    }

    /**
     * @covers \zaporylie\Vipps\Resource\Payment\RefundPayment::getMethod()
     */
    public function testMethod()
    {
        $this->assertEquals(HttpMethod::POST, $this->resource->getMethod());
    }

    /**
     * @covers \zaporylie\Vipps\Resource\Payment\RefundPayment::getPath()
     */
    public function testPath()
    {
        $this->assertEquals('/ecomm/v2/payments/test_order_id/refund', $this->resource->getPath());
        $this->getStringReplace();
        $this->assertEquals('/test_path/v2/payments/test_order_id/refund', $this->resource->getPath());
    }

    /**
     * @covers \zaporylie\Vipps\Resource\Payment\RefundPayment::call()
     */
    public function testCall()
    {
        $this->assertInstanceOf(ResponseRefundPayment::class, $response = $this->resource->call());
        $this->assertEquals(new ResponseRefundPayment(), $response);
    }
}
